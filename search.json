[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2025-02-14-vocalpy-0.10.0/index.html",
    "href": "posts/2025-02-14-vocalpy-0.10.0/index.html",
    "title": "VocalPy 0.10.0 released!",
    "section": "",
    "text": "I want to write up a rundown of what’s new in version 0.10.0 of VocalPy, released at the end of 2024. I am feeling good about this release because I think it’s a pretty solid step forwards for the package. Let me tell you why that is, by giving you a brief rundown of the new features and changes, with some narrative that you won’t get from the CHANGELOG. You definitely won’t get that from the auto-generated release notes that GitHub gives us, since it consists of the single commit between this version and the last one, consisting of this pull request, cryptically named “Post-NMAC GRC 2024 fixes”. And, it’s a lot of changes. Throughout this post, I’ll link to specific issues on GitHub that were closed by that pull request, to hopefully show you that there’s a method to my madness.\nAbout that cryptic name for the pull request: a lot of the features I added and changes I made were after I co-organized and taught this Acoustic Communication And Bioacoustics Bootcamp at the 2024 Neural Mechanisms of Acoustic Communication 2024 Gordon Research Seminar (AKA NMAC GRC 2024, site here), along with the ever-excellent Tessa Rhinehart.\nI want to give a huge, huge thank you to Nick Jourjine and Diana Liao for inviting Tessa and I to teach this workshop. I know firsthand how important the skills that we taught are, especially for graduate students. It was incredibly gratifying to hear as much from participants in the workshop and other organizers of the conference. If we did nothing else, we pointed people to a lot of resources including the website with a curated database of bioacoustics software that Tessa has created (newly updated just recently with assistance from the research group she’s in), as well as guides for scientists on programming and computational projects that I often point people to when I’m teaching. I think that computational methods in this research area will only continue to become more important (although of course I’m biased, and some might say I’m stating the obvious). I also think Nick has had a lot of foresight in connecting these areas of neuroscience to what people are doing in bioacoustics more broadly, for example with his seminar series “Bridging Brains and Bioacoustics”.\nOk, without further ado, here’s a rundown of what’s new in VocalPy 0.10.0."
  },
  {
    "objectID": "posts/2025-02-14-vocalpy-0.10.0/index.html#making-vocalpy-more-functional",
    "href": "posts/2025-02-14-vocalpy-0.10.0/index.html#making-vocalpy-more-functional",
    "title": "VocalPy 0.10.0 released!",
    "section": "Making VocalPy more functional",
    "text": "Making VocalPy more functional\nI was trying to think of a more pithy way to sum up a bunch of the changes I made in this version, to not make you wade through a list of enhancements :sparkles: (as they are often called in CHANGELOGs).\nWhat I came up with is: VocalPy 0.10.0 is more functional. Both functional in the sense of, it actually functions for more than one workflow, as I’ll explain, and in the sense of functional programming. A core tenet of functional program is to avoid objects with a lot of state that gets mutated (changed); this is good for research code in general, and scientific Python in particular, as others have observed It turns out a lot of the changes I made were about removing state from objects. I don’t want this post to be about software design, and I don’t want to admit that VocalPy still isn’t as functional as I’d want it to be, but I can’t resist a good pun (or even a barely functional pun), and the idea of making the library more functional gives me a good hook. So we’ll go with that.\nA picture is worth a thousand words, so I’ll also show you a picture, although I’m not sure if that makes me more or less pithy. This picture shows changes between version 0.9.0 (top ) and version 0.10.0 (bottom).\n\n\n\nchanges-schematic\n\n\n\nBetter workflows for making sound clips and segmenting sound\nThe first set of features and changes have to do with two steps we often take when we begin any analysis of animal sounds.\nStep one is to make clips of the sounds we want to analyze. Usually you need to do this because your raw data consists of hours of audio, e.g., from a recorder deployed in the field for passive acoustic monitoring, or in a behavioral experiment where you have a rig set up to start recording any time the signal from your microphone goes above some level. To make this step easier, the Sound class now has a clip method (as planned in issue #149)\nimport vocalpy as voc\n\nsound = voc.Sound.read(\"big-audio-file-01.wav\")\n\n# first clip containing sound of interest\nclip = sound.clip(start=0., stop=1.4)\nclip.write(\"big-audio-file-01-clip-01.wav\")\n\n# second clip containing sound of interest\nclip2 = sound.clip(start=1.4, stop=2.6)\nclip2.write(\"big-audio-file-01-clip-02.wav\")\nNotice in that snippet that we write the clip to a file. That’s because it’s just a Sound; that is, calling clip gives you a new Sound. Hopefully, that isn’t too surprising, but it brings me to the first breaking change: the Sound method no longer has a path attribute (as planned in issue #162). That means that, where before you had\n&gt;&gt;&gt; import vocalpy as voc\n&gt;&gt;&gt; voc.Sound.read(\"samba.wav\")\nSound(data=array[0.001, -0.002, ...], samplerate=44100, path=\"samba.wav\")\nnow you have\n&gt;&gt;&gt; import vocalpy as voc\n&gt;&gt;&gt; voc.Sound.read(\"samba.wav\")\nSound(data=array[0.001, -0.002, ...], samplerate=44100)\nWhy does this matter?\nBecause the design of the class no longer suggests that a Sound is tied to the data found in a specific file found at a specific path. This seemingly minor change corresponds to a much bigger change in my mental model of VocalPy and how we work with it as researchers, but I’ll save a discussion of that for another post, assuming you’re just here for the “what’s new” part, not a unified theory of research software engineering.\nThat brings us to the second step that we frequently do at the start of an analysis: segment a sequence of sounds into units, for example the syllables of birdsong. In version 0.10.0, the workflow for this has been significantly improved. Before I tell you how the workflow has been improved, let me give you some context. One common way to segment sound is with signal processing-based methods that set a threshold on the audio signal energy, and consider any period above the threshold to be a segment (see vocalpy.segment). More recently it has become common to use statistical models–more precisely, neural network models for [sound event detection] like [TweetyNet] and [DAS]. One thing we have noticed is that there is a gap in the literature comparing approaches to segmenting; that’s part of what we’re trying to make it easier to do (for us and for you). This is why we have a vocalpy.metrics.segmentation module. To make it easier to work with segments and compute these metrics, we represent the output of a segmenting algorithm as a data type, vocalpy.Segments. (You might know that some researchers also use image processing methods to segment a spectrogram into a set of boxes; that’s on our to-do list) Now that you have the context, how has the workflow improved? The original design had each of the functions in vocalpy.segment returned a Segments instance, that was a container for a list of separate Segment instances as well as an associated Sound. As of vocalpy 0.10.0, the vocalpy.Segments class no longer has an instance of a vocalpy.Sound associated with it, and there no longer is a separate Segment class (as planned in issue #154). This is another case where I realized life could be a lot easier by uncomplicating the design of the library (and, again, I’ll save discussion of that for a separate blog post). In place of all these tangled-together classes, we add a single method to the vocalpy.Sound class, vocalpy.Sound.segment, that takes as its argument a set of Segments, and returns a list of Sounds (as planned in issue #150). You might notice that you could, if you want, segment using the clip method I just told you about, saving each one of the segments you’re going to analyze as a clip. Again, without going to deeply into a discussion of the grand unified theory of bioaocustics software, there’s a couple of drawbacks to that approach: first of all, you will end up taking up a bunch of disk space with duplicated data, and second, you will end up with directories full of tiny files that are hard to navigate if you end up needing to inspect some of your data (and, trust me, you will). Instead, what you want is to be able to represent the segments themselves as data, and then grab the audio clips on the fly. Yes, there are also good reasons to save intermediate steps in your analysis so you don’t have to start over from scratch every time you re-run it —for example, saving spectrograms you generate from the segments of audio— but that’s part of the design discussion I’m glossing over here. The last thing I added to the Segments class was the ability to load a set of segments from a csv file, through a Segments.from_csv method (as planned in issue #186). I realized during the bootcamp we ran that it’s pretty common to save segmentation in csv files, e.g., using the Python library Pandas, and so we should make it easier to load these. (VocalPy saves segments in a json file so we can track metadata like the sampling rate of the segmented audio, but that’s again more detail than I want to get into here.)\nOk, we made it through all the details about segemntation. Last thing: I want to thank Nick Jourjine (again) – talking with him about this kind of workflow really helped me think about how to improve it."
  },
  {
    "objectID": "posts/2025-02-14-vocalpy-0.10.0/index.html#a-simpler-consistent-workflow-for-feature-extraction",
    "href": "posts/2025-02-14-vocalpy-0.10.0/index.html#a-simpler-consistent-workflow-for-feature-extraction",
    "title": "VocalPy 0.10.0 released!",
    "section": "A simpler, consistent workflow for feature extraction",
    "text": "A simpler, consistent workflow for feature extraction\nOnce I had simplified the workflow for segmenting sounds, I realized I could simplify the workflow for extracting acoustic features from those sounds. We use a class, FeatureExtractor, to represent this generic step in the workflow; it has an extract method that gives you back Features. This extract method used to take four different things: either a Sound, a Segment (with its associated Sound), a list of Sounds, or a list of Segments. Obviously, it can’t accept a Segment or a list of them if I remove that class. Good, we can remove some code–that’s less to maintain. I modified the FeatureExtractor class to only take in a Sound or a list of Sounds (as planned in issue #163). I also had some inconsistencies where some functions in [vocalpy.feature] would return Features, and in other cases it was the FeatureExtractor taking the output of one of those functions and making it into a Features instance. So I fixed that inconsistency (as planned in issue #145 and issue #146). Last but not least, I renamed the two functions we have right now, from the very verbose, to"
  },
  {
    "objectID": "posts/2025-02-14-vocalpy-0.10.0/index.html#vignettes-on-using-vocalpy-with-scikit-learn-umap-and-hdbscan",
    "href": "posts/2025-02-14-vocalpy-0.10.0/index.html#vignettes-on-using-vocalpy-with-scikit-learn-umap-and-hdbscan",
    "title": "VocalPy 0.10.0 released!",
    "section": "Vignettes on using VocalPy with scikit-learn, UMAP, and HDBSCAN",
    "text": "Vignettes on using VocalPy with scikit-learn, UMAP, and HDBSCAN\n\nCLN: Have FeatureExtractor only take Sound or list of Sounds #163\nBUG: feature.soundsig.predefined_acoustic_features should return vocalpy.Features #145\nBUG/CLN: FeatureExtractor should not be making Features instances #146\nrename feature extraction functions -&gt; biosound and sat"
  },
  {
    "objectID": "posts/2025-02-14-vocalpy-0.10.0/index.html#add-vignettes-on-using-vocalpy-with-scikit-learn-umap-and-hdbscan",
    "href": "posts/2025-02-14-vocalpy-0.10.0/index.html#add-vignettes-on-using-vocalpy-with-scikit-learn-umap-and-hdbscan",
    "title": "VocalPy 0.10.0 released!",
    "section": "Add vignettes on using VocalPy with scikit-learn, UMAP, and HDBSCAN",
    "text": "Add vignettes on using VocalPy with scikit-learn, UMAP, and HDBSCAN\n\nAdd single example files of BF song + mouse pup call #182\nENH: Refactor examples API #185\nENH: Add mouse pup call data and zebra finch call data from ACABB workshop #183"
  },
  {
    "objectID": "posts/2025-02-11-developers-blog/index.html",
    "href": "posts/2025-02-11-developers-blog/index.html",
    "title": "Okay, fine, we’ll have a developer’s blog",
    "section": "",
    "text": "Hey, it’s me, David.\nI’m the person who develops most of this code. I’m interested in how animals communicate with sound, and I’m trying to make it easy for me and other reseachers to study this behavior computationally.\nHopefully, at some point, a team of people will work together to develop it, or something like it, once I can convince them that’s a good idea.\nThen finally I can spend more time playing video games and birding, or doing whatever it is that people do when they’re not being open source software maintainers.\nFirst I have to convince more people that the ideas behind this code are good ideas. Recently I have realized that just writing the code isn’t enough. According to people who have been at this longer than I have, one way to talk people into things is to build not just a project, but a community. (See rule 5 here, and notice I am ignoring rule 1.) Well, I have been working on building a community:\nwe have gotten a lot of contributors to at least one package, (vak)[https://github.com/vocalpy/vak?tab=readme-ov-file#contributors-]. And I am expecting to get more contributors to our core package VocalPy, once we share results we are getting with it right now, using newer features we have added and are adding. We also have a growing number of people joining our forum and asking questions.\nBut it seems like I need to do more if I really want the community to grow. I need to actually explain about what I’m doing here.\nSo, okay, fine, we will have a developer’s blog. And I guess right now that’s the royal we–mainly it’s just me. Mainly this will be a place to post about new releases, and about research that uses the code. Stay tuned for more."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VocalPy blog",
    "section": "",
    "text": "VocalPy 0.10.0 released!\n\n\n\n\n\n\nVocalPy\n\n\nrelease\n\n\n\nWhat’s new in VocalPy version 0.10.0\n\n\n\n\n\nFeb 14, 2024\n\n\nDavid Nicholson\n\n\n\n\n\n\n\n\n\n\n\n\nOkay, fine, we’ll have a developer’s blog\n\n\n\n\n\n\nvocalpy\n\n\nblog\n\n\n\nObligatory first post about blog\n\n\n\n\n\nFeb 11, 2024\n\n\nDavid Nicholson\n\n\n\n\n\n\nNo matching items"
  }
]